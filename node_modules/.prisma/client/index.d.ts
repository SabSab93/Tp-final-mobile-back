
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model BatteryEntry
 * 
 */
export type BatteryEntry = $Result.DefaultSelection<Prisma.$BatteryEntryPayload>
/**
 * Model LocationEntry
 * 
 */
export type LocationEntry = $Result.DefaultSelection<Prisma.$LocationEntryPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.batteryEntry`: Exposes CRUD operations for the **BatteryEntry** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BatteryEntries
    * const batteryEntries = await prisma.batteryEntry.findMany()
    * ```
    */
  get batteryEntry(): Prisma.BatteryEntryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.locationEntry`: Exposes CRUD operations for the **LocationEntry** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LocationEntries
    * const locationEntries = await prisma.locationEntry.findMany()
    * ```
    */
  get locationEntry(): Prisma.LocationEntryDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.5.0
   * Query Engine version: 173f8d54f8d52e692c7e27e72a88314ec7aeff60
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    BatteryEntry: 'BatteryEntry',
    LocationEntry: 'LocationEntry'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "batteryEntry" | "locationEntry"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      BatteryEntry: {
        payload: Prisma.$BatteryEntryPayload<ExtArgs>
        fields: Prisma.BatteryEntryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BatteryEntryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BatteryEntryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BatteryEntryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BatteryEntryPayload>
          }
          findFirst: {
            args: Prisma.BatteryEntryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BatteryEntryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BatteryEntryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BatteryEntryPayload>
          }
          findMany: {
            args: Prisma.BatteryEntryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BatteryEntryPayload>[]
          }
          create: {
            args: Prisma.BatteryEntryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BatteryEntryPayload>
          }
          createMany: {
            args: Prisma.BatteryEntryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BatteryEntryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BatteryEntryPayload>[]
          }
          delete: {
            args: Prisma.BatteryEntryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BatteryEntryPayload>
          }
          update: {
            args: Prisma.BatteryEntryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BatteryEntryPayload>
          }
          deleteMany: {
            args: Prisma.BatteryEntryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BatteryEntryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BatteryEntryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BatteryEntryPayload>[]
          }
          upsert: {
            args: Prisma.BatteryEntryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BatteryEntryPayload>
          }
          aggregate: {
            args: Prisma.BatteryEntryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBatteryEntry>
          }
          groupBy: {
            args: Prisma.BatteryEntryGroupByArgs<ExtArgs>
            result: $Utils.Optional<BatteryEntryGroupByOutputType>[]
          }
          count: {
            args: Prisma.BatteryEntryCountArgs<ExtArgs>
            result: $Utils.Optional<BatteryEntryCountAggregateOutputType> | number
          }
        }
      }
      LocationEntry: {
        payload: Prisma.$LocationEntryPayload<ExtArgs>
        fields: Prisma.LocationEntryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LocationEntryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationEntryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LocationEntryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationEntryPayload>
          }
          findFirst: {
            args: Prisma.LocationEntryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationEntryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LocationEntryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationEntryPayload>
          }
          findMany: {
            args: Prisma.LocationEntryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationEntryPayload>[]
          }
          create: {
            args: Prisma.LocationEntryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationEntryPayload>
          }
          createMany: {
            args: Prisma.LocationEntryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LocationEntryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationEntryPayload>[]
          }
          delete: {
            args: Prisma.LocationEntryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationEntryPayload>
          }
          update: {
            args: Prisma.LocationEntryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationEntryPayload>
          }
          deleteMany: {
            args: Prisma.LocationEntryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LocationEntryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LocationEntryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationEntryPayload>[]
          }
          upsert: {
            args: Prisma.LocationEntryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationEntryPayload>
          }
          aggregate: {
            args: Prisma.LocationEntryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLocationEntry>
          }
          groupBy: {
            args: Prisma.LocationEntryGroupByArgs<ExtArgs>
            result: $Utils.Optional<LocationEntryGroupByOutputType>[]
          }
          count: {
            args: Prisma.LocationEntryCountArgs<ExtArgs>
            result: $Utils.Optional<LocationEntryCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    batteryEntry?: BatteryEntryOmit
    locationEntry?: LocationEntryOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    batteries: number
    locations: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    batteries?: boolean | UserCountOutputTypeCountBatteriesArgs
    locations?: boolean | UserCountOutputTypeCountLocationsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBatteriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BatteryEntryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationEntryWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    password: string | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    password: string | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    email: number
    password: number
    createdAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    password?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    password?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    password?: true
    createdAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    firstName: string
    lastName: string
    email: string
    password: string
    createdAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    password?: boolean
    createdAt?: boolean
    batteries?: boolean | User$batteriesArgs<ExtArgs>
    locations?: boolean | User$locationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    password?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    password?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    password?: boolean
    createdAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "firstName" | "lastName" | "email" | "password" | "createdAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    batteries?: boolean | User$batteriesArgs<ExtArgs>
    locations?: boolean | User$locationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      batteries: Prisma.$BatteryEntryPayload<ExtArgs>[]
      locations: Prisma.$LocationEntryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      firstName: string
      lastName: string
      email: string
      password: string
      createdAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    batteries<T extends User$batteriesArgs<ExtArgs> = {}>(args?: Subset<T, User$batteriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BatteryEntryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    locations<T extends User$locationsArgs<ExtArgs> = {}>(args?: Subset<T, User$locationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationEntryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.batteries
   */
  export type User$batteriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BatteryEntry
     */
    select?: BatteryEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BatteryEntry
     */
    omit?: BatteryEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BatteryEntryInclude<ExtArgs> | null
    where?: BatteryEntryWhereInput
    orderBy?: BatteryEntryOrderByWithRelationInput | BatteryEntryOrderByWithRelationInput[]
    cursor?: BatteryEntryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BatteryEntryScalarFieldEnum | BatteryEntryScalarFieldEnum[]
  }

  /**
   * User.locations
   */
  export type User$locationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationEntry
     */
    select?: LocationEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationEntry
     */
    omit?: LocationEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationEntryInclude<ExtArgs> | null
    where?: LocationEntryWhereInput
    orderBy?: LocationEntryOrderByWithRelationInput | LocationEntryOrderByWithRelationInput[]
    cursor?: LocationEntryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LocationEntryScalarFieldEnum | LocationEntryScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model BatteryEntry
   */

  export type AggregateBatteryEntry = {
    _count: BatteryEntryCountAggregateOutputType | null
    _avg: BatteryEntryAvgAggregateOutputType | null
    _sum: BatteryEntrySumAggregateOutputType | null
    _min: BatteryEntryMinAggregateOutputType | null
    _max: BatteryEntryMaxAggregateOutputType | null
  }

  export type BatteryEntryAvgAggregateOutputType = {
    level: number | null
  }

  export type BatteryEntrySumAggregateOutputType = {
    level: number | null
  }

  export type BatteryEntryMinAggregateOutputType = {
    id: string | null
    level: number | null
    recordedAt: Date | null
    userId: string | null
  }

  export type BatteryEntryMaxAggregateOutputType = {
    id: string | null
    level: number | null
    recordedAt: Date | null
    userId: string | null
  }

  export type BatteryEntryCountAggregateOutputType = {
    id: number
    level: number
    recordedAt: number
    userId: number
    _all: number
  }


  export type BatteryEntryAvgAggregateInputType = {
    level?: true
  }

  export type BatteryEntrySumAggregateInputType = {
    level?: true
  }

  export type BatteryEntryMinAggregateInputType = {
    id?: true
    level?: true
    recordedAt?: true
    userId?: true
  }

  export type BatteryEntryMaxAggregateInputType = {
    id?: true
    level?: true
    recordedAt?: true
    userId?: true
  }

  export type BatteryEntryCountAggregateInputType = {
    id?: true
    level?: true
    recordedAt?: true
    userId?: true
    _all?: true
  }

  export type BatteryEntryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BatteryEntry to aggregate.
     */
    where?: BatteryEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BatteryEntries to fetch.
     */
    orderBy?: BatteryEntryOrderByWithRelationInput | BatteryEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BatteryEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BatteryEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BatteryEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BatteryEntries
    **/
    _count?: true | BatteryEntryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BatteryEntryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BatteryEntrySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BatteryEntryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BatteryEntryMaxAggregateInputType
  }

  export type GetBatteryEntryAggregateType<T extends BatteryEntryAggregateArgs> = {
        [P in keyof T & keyof AggregateBatteryEntry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBatteryEntry[P]>
      : GetScalarType<T[P], AggregateBatteryEntry[P]>
  }




  export type BatteryEntryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BatteryEntryWhereInput
    orderBy?: BatteryEntryOrderByWithAggregationInput | BatteryEntryOrderByWithAggregationInput[]
    by: BatteryEntryScalarFieldEnum[] | BatteryEntryScalarFieldEnum
    having?: BatteryEntryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BatteryEntryCountAggregateInputType | true
    _avg?: BatteryEntryAvgAggregateInputType
    _sum?: BatteryEntrySumAggregateInputType
    _min?: BatteryEntryMinAggregateInputType
    _max?: BatteryEntryMaxAggregateInputType
  }

  export type BatteryEntryGroupByOutputType = {
    id: string
    level: number
    recordedAt: Date
    userId: string
    _count: BatteryEntryCountAggregateOutputType | null
    _avg: BatteryEntryAvgAggregateOutputType | null
    _sum: BatteryEntrySumAggregateOutputType | null
    _min: BatteryEntryMinAggregateOutputType | null
    _max: BatteryEntryMaxAggregateOutputType | null
  }

  type GetBatteryEntryGroupByPayload<T extends BatteryEntryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BatteryEntryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BatteryEntryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BatteryEntryGroupByOutputType[P]>
            : GetScalarType<T[P], BatteryEntryGroupByOutputType[P]>
        }
      >
    >


  export type BatteryEntrySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    level?: boolean
    recordedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["batteryEntry"]>

  export type BatteryEntrySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    level?: boolean
    recordedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["batteryEntry"]>

  export type BatteryEntrySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    level?: boolean
    recordedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["batteryEntry"]>

  export type BatteryEntrySelectScalar = {
    id?: boolean
    level?: boolean
    recordedAt?: boolean
    userId?: boolean
  }

  export type BatteryEntryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "level" | "recordedAt" | "userId", ExtArgs["result"]["batteryEntry"]>
  export type BatteryEntryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type BatteryEntryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type BatteryEntryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $BatteryEntryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BatteryEntry"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      level: number
      recordedAt: Date
      userId: string
    }, ExtArgs["result"]["batteryEntry"]>
    composites: {}
  }

  type BatteryEntryGetPayload<S extends boolean | null | undefined | BatteryEntryDefaultArgs> = $Result.GetResult<Prisma.$BatteryEntryPayload, S>

  type BatteryEntryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BatteryEntryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BatteryEntryCountAggregateInputType | true
    }

  export interface BatteryEntryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BatteryEntry'], meta: { name: 'BatteryEntry' } }
    /**
     * Find zero or one BatteryEntry that matches the filter.
     * @param {BatteryEntryFindUniqueArgs} args - Arguments to find a BatteryEntry
     * @example
     * // Get one BatteryEntry
     * const batteryEntry = await prisma.batteryEntry.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BatteryEntryFindUniqueArgs>(args: SelectSubset<T, BatteryEntryFindUniqueArgs<ExtArgs>>): Prisma__BatteryEntryClient<$Result.GetResult<Prisma.$BatteryEntryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BatteryEntry that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BatteryEntryFindUniqueOrThrowArgs} args - Arguments to find a BatteryEntry
     * @example
     * // Get one BatteryEntry
     * const batteryEntry = await prisma.batteryEntry.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BatteryEntryFindUniqueOrThrowArgs>(args: SelectSubset<T, BatteryEntryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BatteryEntryClient<$Result.GetResult<Prisma.$BatteryEntryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BatteryEntry that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BatteryEntryFindFirstArgs} args - Arguments to find a BatteryEntry
     * @example
     * // Get one BatteryEntry
     * const batteryEntry = await prisma.batteryEntry.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BatteryEntryFindFirstArgs>(args?: SelectSubset<T, BatteryEntryFindFirstArgs<ExtArgs>>): Prisma__BatteryEntryClient<$Result.GetResult<Prisma.$BatteryEntryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BatteryEntry that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BatteryEntryFindFirstOrThrowArgs} args - Arguments to find a BatteryEntry
     * @example
     * // Get one BatteryEntry
     * const batteryEntry = await prisma.batteryEntry.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BatteryEntryFindFirstOrThrowArgs>(args?: SelectSubset<T, BatteryEntryFindFirstOrThrowArgs<ExtArgs>>): Prisma__BatteryEntryClient<$Result.GetResult<Prisma.$BatteryEntryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BatteryEntries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BatteryEntryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BatteryEntries
     * const batteryEntries = await prisma.batteryEntry.findMany()
     * 
     * // Get first 10 BatteryEntries
     * const batteryEntries = await prisma.batteryEntry.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const batteryEntryWithIdOnly = await prisma.batteryEntry.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BatteryEntryFindManyArgs>(args?: SelectSubset<T, BatteryEntryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BatteryEntryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BatteryEntry.
     * @param {BatteryEntryCreateArgs} args - Arguments to create a BatteryEntry.
     * @example
     * // Create one BatteryEntry
     * const BatteryEntry = await prisma.batteryEntry.create({
     *   data: {
     *     // ... data to create a BatteryEntry
     *   }
     * })
     * 
     */
    create<T extends BatteryEntryCreateArgs>(args: SelectSubset<T, BatteryEntryCreateArgs<ExtArgs>>): Prisma__BatteryEntryClient<$Result.GetResult<Prisma.$BatteryEntryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BatteryEntries.
     * @param {BatteryEntryCreateManyArgs} args - Arguments to create many BatteryEntries.
     * @example
     * // Create many BatteryEntries
     * const batteryEntry = await prisma.batteryEntry.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BatteryEntryCreateManyArgs>(args?: SelectSubset<T, BatteryEntryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BatteryEntries and returns the data saved in the database.
     * @param {BatteryEntryCreateManyAndReturnArgs} args - Arguments to create many BatteryEntries.
     * @example
     * // Create many BatteryEntries
     * const batteryEntry = await prisma.batteryEntry.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BatteryEntries and only return the `id`
     * const batteryEntryWithIdOnly = await prisma.batteryEntry.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BatteryEntryCreateManyAndReturnArgs>(args?: SelectSubset<T, BatteryEntryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BatteryEntryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a BatteryEntry.
     * @param {BatteryEntryDeleteArgs} args - Arguments to delete one BatteryEntry.
     * @example
     * // Delete one BatteryEntry
     * const BatteryEntry = await prisma.batteryEntry.delete({
     *   where: {
     *     // ... filter to delete one BatteryEntry
     *   }
     * })
     * 
     */
    delete<T extends BatteryEntryDeleteArgs>(args: SelectSubset<T, BatteryEntryDeleteArgs<ExtArgs>>): Prisma__BatteryEntryClient<$Result.GetResult<Prisma.$BatteryEntryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BatteryEntry.
     * @param {BatteryEntryUpdateArgs} args - Arguments to update one BatteryEntry.
     * @example
     * // Update one BatteryEntry
     * const batteryEntry = await prisma.batteryEntry.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BatteryEntryUpdateArgs>(args: SelectSubset<T, BatteryEntryUpdateArgs<ExtArgs>>): Prisma__BatteryEntryClient<$Result.GetResult<Prisma.$BatteryEntryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BatteryEntries.
     * @param {BatteryEntryDeleteManyArgs} args - Arguments to filter BatteryEntries to delete.
     * @example
     * // Delete a few BatteryEntries
     * const { count } = await prisma.batteryEntry.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BatteryEntryDeleteManyArgs>(args?: SelectSubset<T, BatteryEntryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BatteryEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BatteryEntryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BatteryEntries
     * const batteryEntry = await prisma.batteryEntry.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BatteryEntryUpdateManyArgs>(args: SelectSubset<T, BatteryEntryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BatteryEntries and returns the data updated in the database.
     * @param {BatteryEntryUpdateManyAndReturnArgs} args - Arguments to update many BatteryEntries.
     * @example
     * // Update many BatteryEntries
     * const batteryEntry = await prisma.batteryEntry.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BatteryEntries and only return the `id`
     * const batteryEntryWithIdOnly = await prisma.batteryEntry.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BatteryEntryUpdateManyAndReturnArgs>(args: SelectSubset<T, BatteryEntryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BatteryEntryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one BatteryEntry.
     * @param {BatteryEntryUpsertArgs} args - Arguments to update or create a BatteryEntry.
     * @example
     * // Update or create a BatteryEntry
     * const batteryEntry = await prisma.batteryEntry.upsert({
     *   create: {
     *     // ... data to create a BatteryEntry
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BatteryEntry we want to update
     *   }
     * })
     */
    upsert<T extends BatteryEntryUpsertArgs>(args: SelectSubset<T, BatteryEntryUpsertArgs<ExtArgs>>): Prisma__BatteryEntryClient<$Result.GetResult<Prisma.$BatteryEntryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BatteryEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BatteryEntryCountArgs} args - Arguments to filter BatteryEntries to count.
     * @example
     * // Count the number of BatteryEntries
     * const count = await prisma.batteryEntry.count({
     *   where: {
     *     // ... the filter for the BatteryEntries we want to count
     *   }
     * })
    **/
    count<T extends BatteryEntryCountArgs>(
      args?: Subset<T, BatteryEntryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BatteryEntryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BatteryEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BatteryEntryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BatteryEntryAggregateArgs>(args: Subset<T, BatteryEntryAggregateArgs>): Prisma.PrismaPromise<GetBatteryEntryAggregateType<T>>

    /**
     * Group by BatteryEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BatteryEntryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BatteryEntryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BatteryEntryGroupByArgs['orderBy'] }
        : { orderBy?: BatteryEntryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BatteryEntryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBatteryEntryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BatteryEntry model
   */
  readonly fields: BatteryEntryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BatteryEntry.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BatteryEntryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BatteryEntry model
   */ 
  interface BatteryEntryFieldRefs {
    readonly id: FieldRef<"BatteryEntry", 'String'>
    readonly level: FieldRef<"BatteryEntry", 'Int'>
    readonly recordedAt: FieldRef<"BatteryEntry", 'DateTime'>
    readonly userId: FieldRef<"BatteryEntry", 'String'>
  }
    

  // Custom InputTypes
  /**
   * BatteryEntry findUnique
   */
  export type BatteryEntryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BatteryEntry
     */
    select?: BatteryEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BatteryEntry
     */
    omit?: BatteryEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BatteryEntryInclude<ExtArgs> | null
    /**
     * Filter, which BatteryEntry to fetch.
     */
    where: BatteryEntryWhereUniqueInput
  }

  /**
   * BatteryEntry findUniqueOrThrow
   */
  export type BatteryEntryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BatteryEntry
     */
    select?: BatteryEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BatteryEntry
     */
    omit?: BatteryEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BatteryEntryInclude<ExtArgs> | null
    /**
     * Filter, which BatteryEntry to fetch.
     */
    where: BatteryEntryWhereUniqueInput
  }

  /**
   * BatteryEntry findFirst
   */
  export type BatteryEntryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BatteryEntry
     */
    select?: BatteryEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BatteryEntry
     */
    omit?: BatteryEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BatteryEntryInclude<ExtArgs> | null
    /**
     * Filter, which BatteryEntry to fetch.
     */
    where?: BatteryEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BatteryEntries to fetch.
     */
    orderBy?: BatteryEntryOrderByWithRelationInput | BatteryEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BatteryEntries.
     */
    cursor?: BatteryEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BatteryEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BatteryEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BatteryEntries.
     */
    distinct?: BatteryEntryScalarFieldEnum | BatteryEntryScalarFieldEnum[]
  }

  /**
   * BatteryEntry findFirstOrThrow
   */
  export type BatteryEntryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BatteryEntry
     */
    select?: BatteryEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BatteryEntry
     */
    omit?: BatteryEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BatteryEntryInclude<ExtArgs> | null
    /**
     * Filter, which BatteryEntry to fetch.
     */
    where?: BatteryEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BatteryEntries to fetch.
     */
    orderBy?: BatteryEntryOrderByWithRelationInput | BatteryEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BatteryEntries.
     */
    cursor?: BatteryEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BatteryEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BatteryEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BatteryEntries.
     */
    distinct?: BatteryEntryScalarFieldEnum | BatteryEntryScalarFieldEnum[]
  }

  /**
   * BatteryEntry findMany
   */
  export type BatteryEntryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BatteryEntry
     */
    select?: BatteryEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BatteryEntry
     */
    omit?: BatteryEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BatteryEntryInclude<ExtArgs> | null
    /**
     * Filter, which BatteryEntries to fetch.
     */
    where?: BatteryEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BatteryEntries to fetch.
     */
    orderBy?: BatteryEntryOrderByWithRelationInput | BatteryEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BatteryEntries.
     */
    cursor?: BatteryEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BatteryEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BatteryEntries.
     */
    skip?: number
    distinct?: BatteryEntryScalarFieldEnum | BatteryEntryScalarFieldEnum[]
  }

  /**
   * BatteryEntry create
   */
  export type BatteryEntryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BatteryEntry
     */
    select?: BatteryEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BatteryEntry
     */
    omit?: BatteryEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BatteryEntryInclude<ExtArgs> | null
    /**
     * The data needed to create a BatteryEntry.
     */
    data: XOR<BatteryEntryCreateInput, BatteryEntryUncheckedCreateInput>
  }

  /**
   * BatteryEntry createMany
   */
  export type BatteryEntryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BatteryEntries.
     */
    data: BatteryEntryCreateManyInput | BatteryEntryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BatteryEntry createManyAndReturn
   */
  export type BatteryEntryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BatteryEntry
     */
    select?: BatteryEntrySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BatteryEntry
     */
    omit?: BatteryEntryOmit<ExtArgs> | null
    /**
     * The data used to create many BatteryEntries.
     */
    data: BatteryEntryCreateManyInput | BatteryEntryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BatteryEntryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BatteryEntry update
   */
  export type BatteryEntryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BatteryEntry
     */
    select?: BatteryEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BatteryEntry
     */
    omit?: BatteryEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BatteryEntryInclude<ExtArgs> | null
    /**
     * The data needed to update a BatteryEntry.
     */
    data: XOR<BatteryEntryUpdateInput, BatteryEntryUncheckedUpdateInput>
    /**
     * Choose, which BatteryEntry to update.
     */
    where: BatteryEntryWhereUniqueInput
  }

  /**
   * BatteryEntry updateMany
   */
  export type BatteryEntryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BatteryEntries.
     */
    data: XOR<BatteryEntryUpdateManyMutationInput, BatteryEntryUncheckedUpdateManyInput>
    /**
     * Filter which BatteryEntries to update
     */
    where?: BatteryEntryWhereInput
    /**
     * Limit how many BatteryEntries to update.
     */
    limit?: number
  }

  /**
   * BatteryEntry updateManyAndReturn
   */
  export type BatteryEntryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BatteryEntry
     */
    select?: BatteryEntrySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BatteryEntry
     */
    omit?: BatteryEntryOmit<ExtArgs> | null
    /**
     * The data used to update BatteryEntries.
     */
    data: XOR<BatteryEntryUpdateManyMutationInput, BatteryEntryUncheckedUpdateManyInput>
    /**
     * Filter which BatteryEntries to update
     */
    where?: BatteryEntryWhereInput
    /**
     * Limit how many BatteryEntries to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BatteryEntryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * BatteryEntry upsert
   */
  export type BatteryEntryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BatteryEntry
     */
    select?: BatteryEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BatteryEntry
     */
    omit?: BatteryEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BatteryEntryInclude<ExtArgs> | null
    /**
     * The filter to search for the BatteryEntry to update in case it exists.
     */
    where: BatteryEntryWhereUniqueInput
    /**
     * In case the BatteryEntry found by the `where` argument doesn't exist, create a new BatteryEntry with this data.
     */
    create: XOR<BatteryEntryCreateInput, BatteryEntryUncheckedCreateInput>
    /**
     * In case the BatteryEntry was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BatteryEntryUpdateInput, BatteryEntryUncheckedUpdateInput>
  }

  /**
   * BatteryEntry delete
   */
  export type BatteryEntryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BatteryEntry
     */
    select?: BatteryEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BatteryEntry
     */
    omit?: BatteryEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BatteryEntryInclude<ExtArgs> | null
    /**
     * Filter which BatteryEntry to delete.
     */
    where: BatteryEntryWhereUniqueInput
  }

  /**
   * BatteryEntry deleteMany
   */
  export type BatteryEntryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BatteryEntries to delete
     */
    where?: BatteryEntryWhereInput
    /**
     * Limit how many BatteryEntries to delete.
     */
    limit?: number
  }

  /**
   * BatteryEntry without action
   */
  export type BatteryEntryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BatteryEntry
     */
    select?: BatteryEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BatteryEntry
     */
    omit?: BatteryEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BatteryEntryInclude<ExtArgs> | null
  }


  /**
   * Model LocationEntry
   */

  export type AggregateLocationEntry = {
    _count: LocationEntryCountAggregateOutputType | null
    _avg: LocationEntryAvgAggregateOutputType | null
    _sum: LocationEntrySumAggregateOutputType | null
    _min: LocationEntryMinAggregateOutputType | null
    _max: LocationEntryMaxAggregateOutputType | null
  }

  export type LocationEntryAvgAggregateOutputType = {
    latitude: number | null
    longitude: number | null
    accuracy: number | null
  }

  export type LocationEntrySumAggregateOutputType = {
    latitude: number | null
    longitude: number | null
    accuracy: number | null
  }

  export type LocationEntryMinAggregateOutputType = {
    id: string | null
    latitude: number | null
    longitude: number | null
    accuracy: number | null
    recordedAt: Date | null
    userId: string | null
  }

  export type LocationEntryMaxAggregateOutputType = {
    id: string | null
    latitude: number | null
    longitude: number | null
    accuracy: number | null
    recordedAt: Date | null
    userId: string | null
  }

  export type LocationEntryCountAggregateOutputType = {
    id: number
    latitude: number
    longitude: number
    accuracy: number
    recordedAt: number
    userId: number
    _all: number
  }


  export type LocationEntryAvgAggregateInputType = {
    latitude?: true
    longitude?: true
    accuracy?: true
  }

  export type LocationEntrySumAggregateInputType = {
    latitude?: true
    longitude?: true
    accuracy?: true
  }

  export type LocationEntryMinAggregateInputType = {
    id?: true
    latitude?: true
    longitude?: true
    accuracy?: true
    recordedAt?: true
    userId?: true
  }

  export type LocationEntryMaxAggregateInputType = {
    id?: true
    latitude?: true
    longitude?: true
    accuracy?: true
    recordedAt?: true
    userId?: true
  }

  export type LocationEntryCountAggregateInputType = {
    id?: true
    latitude?: true
    longitude?: true
    accuracy?: true
    recordedAt?: true
    userId?: true
    _all?: true
  }

  export type LocationEntryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LocationEntry to aggregate.
     */
    where?: LocationEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LocationEntries to fetch.
     */
    orderBy?: LocationEntryOrderByWithRelationInput | LocationEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LocationEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LocationEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LocationEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LocationEntries
    **/
    _count?: true | LocationEntryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LocationEntryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LocationEntrySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LocationEntryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LocationEntryMaxAggregateInputType
  }

  export type GetLocationEntryAggregateType<T extends LocationEntryAggregateArgs> = {
        [P in keyof T & keyof AggregateLocationEntry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLocationEntry[P]>
      : GetScalarType<T[P], AggregateLocationEntry[P]>
  }




  export type LocationEntryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationEntryWhereInput
    orderBy?: LocationEntryOrderByWithAggregationInput | LocationEntryOrderByWithAggregationInput[]
    by: LocationEntryScalarFieldEnum[] | LocationEntryScalarFieldEnum
    having?: LocationEntryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LocationEntryCountAggregateInputType | true
    _avg?: LocationEntryAvgAggregateInputType
    _sum?: LocationEntrySumAggregateInputType
    _min?: LocationEntryMinAggregateInputType
    _max?: LocationEntryMaxAggregateInputType
  }

  export type LocationEntryGroupByOutputType = {
    id: string
    latitude: number
    longitude: number
    accuracy: number | null
    recordedAt: Date
    userId: string
    _count: LocationEntryCountAggregateOutputType | null
    _avg: LocationEntryAvgAggregateOutputType | null
    _sum: LocationEntrySumAggregateOutputType | null
    _min: LocationEntryMinAggregateOutputType | null
    _max: LocationEntryMaxAggregateOutputType | null
  }

  type GetLocationEntryGroupByPayload<T extends LocationEntryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LocationEntryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LocationEntryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LocationEntryGroupByOutputType[P]>
            : GetScalarType<T[P], LocationEntryGroupByOutputType[P]>
        }
      >
    >


  export type LocationEntrySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    latitude?: boolean
    longitude?: boolean
    accuracy?: boolean
    recordedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["locationEntry"]>

  export type LocationEntrySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    latitude?: boolean
    longitude?: boolean
    accuracy?: boolean
    recordedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["locationEntry"]>

  export type LocationEntrySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    latitude?: boolean
    longitude?: boolean
    accuracy?: boolean
    recordedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["locationEntry"]>

  export type LocationEntrySelectScalar = {
    id?: boolean
    latitude?: boolean
    longitude?: boolean
    accuracy?: boolean
    recordedAt?: boolean
    userId?: boolean
  }

  export type LocationEntryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "latitude" | "longitude" | "accuracy" | "recordedAt" | "userId", ExtArgs["result"]["locationEntry"]>
  export type LocationEntryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type LocationEntryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type LocationEntryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $LocationEntryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LocationEntry"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      latitude: number
      longitude: number
      accuracy: number | null
      recordedAt: Date
      userId: string
    }, ExtArgs["result"]["locationEntry"]>
    composites: {}
  }

  type LocationEntryGetPayload<S extends boolean | null | undefined | LocationEntryDefaultArgs> = $Result.GetResult<Prisma.$LocationEntryPayload, S>

  type LocationEntryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LocationEntryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LocationEntryCountAggregateInputType | true
    }

  export interface LocationEntryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LocationEntry'], meta: { name: 'LocationEntry' } }
    /**
     * Find zero or one LocationEntry that matches the filter.
     * @param {LocationEntryFindUniqueArgs} args - Arguments to find a LocationEntry
     * @example
     * // Get one LocationEntry
     * const locationEntry = await prisma.locationEntry.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LocationEntryFindUniqueArgs>(args: SelectSubset<T, LocationEntryFindUniqueArgs<ExtArgs>>): Prisma__LocationEntryClient<$Result.GetResult<Prisma.$LocationEntryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LocationEntry that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LocationEntryFindUniqueOrThrowArgs} args - Arguments to find a LocationEntry
     * @example
     * // Get one LocationEntry
     * const locationEntry = await prisma.locationEntry.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LocationEntryFindUniqueOrThrowArgs>(args: SelectSubset<T, LocationEntryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LocationEntryClient<$Result.GetResult<Prisma.$LocationEntryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LocationEntry that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationEntryFindFirstArgs} args - Arguments to find a LocationEntry
     * @example
     * // Get one LocationEntry
     * const locationEntry = await prisma.locationEntry.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LocationEntryFindFirstArgs>(args?: SelectSubset<T, LocationEntryFindFirstArgs<ExtArgs>>): Prisma__LocationEntryClient<$Result.GetResult<Prisma.$LocationEntryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LocationEntry that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationEntryFindFirstOrThrowArgs} args - Arguments to find a LocationEntry
     * @example
     * // Get one LocationEntry
     * const locationEntry = await prisma.locationEntry.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LocationEntryFindFirstOrThrowArgs>(args?: SelectSubset<T, LocationEntryFindFirstOrThrowArgs<ExtArgs>>): Prisma__LocationEntryClient<$Result.GetResult<Prisma.$LocationEntryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LocationEntries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationEntryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LocationEntries
     * const locationEntries = await prisma.locationEntry.findMany()
     * 
     * // Get first 10 LocationEntries
     * const locationEntries = await prisma.locationEntry.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const locationEntryWithIdOnly = await prisma.locationEntry.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LocationEntryFindManyArgs>(args?: SelectSubset<T, LocationEntryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationEntryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LocationEntry.
     * @param {LocationEntryCreateArgs} args - Arguments to create a LocationEntry.
     * @example
     * // Create one LocationEntry
     * const LocationEntry = await prisma.locationEntry.create({
     *   data: {
     *     // ... data to create a LocationEntry
     *   }
     * })
     * 
     */
    create<T extends LocationEntryCreateArgs>(args: SelectSubset<T, LocationEntryCreateArgs<ExtArgs>>): Prisma__LocationEntryClient<$Result.GetResult<Prisma.$LocationEntryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LocationEntries.
     * @param {LocationEntryCreateManyArgs} args - Arguments to create many LocationEntries.
     * @example
     * // Create many LocationEntries
     * const locationEntry = await prisma.locationEntry.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LocationEntryCreateManyArgs>(args?: SelectSubset<T, LocationEntryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LocationEntries and returns the data saved in the database.
     * @param {LocationEntryCreateManyAndReturnArgs} args - Arguments to create many LocationEntries.
     * @example
     * // Create many LocationEntries
     * const locationEntry = await prisma.locationEntry.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LocationEntries and only return the `id`
     * const locationEntryWithIdOnly = await prisma.locationEntry.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LocationEntryCreateManyAndReturnArgs>(args?: SelectSubset<T, LocationEntryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationEntryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LocationEntry.
     * @param {LocationEntryDeleteArgs} args - Arguments to delete one LocationEntry.
     * @example
     * // Delete one LocationEntry
     * const LocationEntry = await prisma.locationEntry.delete({
     *   where: {
     *     // ... filter to delete one LocationEntry
     *   }
     * })
     * 
     */
    delete<T extends LocationEntryDeleteArgs>(args: SelectSubset<T, LocationEntryDeleteArgs<ExtArgs>>): Prisma__LocationEntryClient<$Result.GetResult<Prisma.$LocationEntryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LocationEntry.
     * @param {LocationEntryUpdateArgs} args - Arguments to update one LocationEntry.
     * @example
     * // Update one LocationEntry
     * const locationEntry = await prisma.locationEntry.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LocationEntryUpdateArgs>(args: SelectSubset<T, LocationEntryUpdateArgs<ExtArgs>>): Prisma__LocationEntryClient<$Result.GetResult<Prisma.$LocationEntryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LocationEntries.
     * @param {LocationEntryDeleteManyArgs} args - Arguments to filter LocationEntries to delete.
     * @example
     * // Delete a few LocationEntries
     * const { count } = await prisma.locationEntry.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LocationEntryDeleteManyArgs>(args?: SelectSubset<T, LocationEntryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LocationEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationEntryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LocationEntries
     * const locationEntry = await prisma.locationEntry.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LocationEntryUpdateManyArgs>(args: SelectSubset<T, LocationEntryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LocationEntries and returns the data updated in the database.
     * @param {LocationEntryUpdateManyAndReturnArgs} args - Arguments to update many LocationEntries.
     * @example
     * // Update many LocationEntries
     * const locationEntry = await prisma.locationEntry.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LocationEntries and only return the `id`
     * const locationEntryWithIdOnly = await prisma.locationEntry.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LocationEntryUpdateManyAndReturnArgs>(args: SelectSubset<T, LocationEntryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationEntryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LocationEntry.
     * @param {LocationEntryUpsertArgs} args - Arguments to update or create a LocationEntry.
     * @example
     * // Update or create a LocationEntry
     * const locationEntry = await prisma.locationEntry.upsert({
     *   create: {
     *     // ... data to create a LocationEntry
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LocationEntry we want to update
     *   }
     * })
     */
    upsert<T extends LocationEntryUpsertArgs>(args: SelectSubset<T, LocationEntryUpsertArgs<ExtArgs>>): Prisma__LocationEntryClient<$Result.GetResult<Prisma.$LocationEntryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LocationEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationEntryCountArgs} args - Arguments to filter LocationEntries to count.
     * @example
     * // Count the number of LocationEntries
     * const count = await prisma.locationEntry.count({
     *   where: {
     *     // ... the filter for the LocationEntries we want to count
     *   }
     * })
    **/
    count<T extends LocationEntryCountArgs>(
      args?: Subset<T, LocationEntryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LocationEntryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LocationEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationEntryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LocationEntryAggregateArgs>(args: Subset<T, LocationEntryAggregateArgs>): Prisma.PrismaPromise<GetLocationEntryAggregateType<T>>

    /**
     * Group by LocationEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationEntryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LocationEntryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LocationEntryGroupByArgs['orderBy'] }
        : { orderBy?: LocationEntryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LocationEntryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLocationEntryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LocationEntry model
   */
  readonly fields: LocationEntryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LocationEntry.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LocationEntryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LocationEntry model
   */ 
  interface LocationEntryFieldRefs {
    readonly id: FieldRef<"LocationEntry", 'String'>
    readonly latitude: FieldRef<"LocationEntry", 'Float'>
    readonly longitude: FieldRef<"LocationEntry", 'Float'>
    readonly accuracy: FieldRef<"LocationEntry", 'Float'>
    readonly recordedAt: FieldRef<"LocationEntry", 'DateTime'>
    readonly userId: FieldRef<"LocationEntry", 'String'>
  }
    

  // Custom InputTypes
  /**
   * LocationEntry findUnique
   */
  export type LocationEntryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationEntry
     */
    select?: LocationEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationEntry
     */
    omit?: LocationEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationEntryInclude<ExtArgs> | null
    /**
     * Filter, which LocationEntry to fetch.
     */
    where: LocationEntryWhereUniqueInput
  }

  /**
   * LocationEntry findUniqueOrThrow
   */
  export type LocationEntryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationEntry
     */
    select?: LocationEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationEntry
     */
    omit?: LocationEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationEntryInclude<ExtArgs> | null
    /**
     * Filter, which LocationEntry to fetch.
     */
    where: LocationEntryWhereUniqueInput
  }

  /**
   * LocationEntry findFirst
   */
  export type LocationEntryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationEntry
     */
    select?: LocationEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationEntry
     */
    omit?: LocationEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationEntryInclude<ExtArgs> | null
    /**
     * Filter, which LocationEntry to fetch.
     */
    where?: LocationEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LocationEntries to fetch.
     */
    orderBy?: LocationEntryOrderByWithRelationInput | LocationEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LocationEntries.
     */
    cursor?: LocationEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LocationEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LocationEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LocationEntries.
     */
    distinct?: LocationEntryScalarFieldEnum | LocationEntryScalarFieldEnum[]
  }

  /**
   * LocationEntry findFirstOrThrow
   */
  export type LocationEntryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationEntry
     */
    select?: LocationEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationEntry
     */
    omit?: LocationEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationEntryInclude<ExtArgs> | null
    /**
     * Filter, which LocationEntry to fetch.
     */
    where?: LocationEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LocationEntries to fetch.
     */
    orderBy?: LocationEntryOrderByWithRelationInput | LocationEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LocationEntries.
     */
    cursor?: LocationEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LocationEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LocationEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LocationEntries.
     */
    distinct?: LocationEntryScalarFieldEnum | LocationEntryScalarFieldEnum[]
  }

  /**
   * LocationEntry findMany
   */
  export type LocationEntryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationEntry
     */
    select?: LocationEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationEntry
     */
    omit?: LocationEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationEntryInclude<ExtArgs> | null
    /**
     * Filter, which LocationEntries to fetch.
     */
    where?: LocationEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LocationEntries to fetch.
     */
    orderBy?: LocationEntryOrderByWithRelationInput | LocationEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LocationEntries.
     */
    cursor?: LocationEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LocationEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LocationEntries.
     */
    skip?: number
    distinct?: LocationEntryScalarFieldEnum | LocationEntryScalarFieldEnum[]
  }

  /**
   * LocationEntry create
   */
  export type LocationEntryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationEntry
     */
    select?: LocationEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationEntry
     */
    omit?: LocationEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationEntryInclude<ExtArgs> | null
    /**
     * The data needed to create a LocationEntry.
     */
    data: XOR<LocationEntryCreateInput, LocationEntryUncheckedCreateInput>
  }

  /**
   * LocationEntry createMany
   */
  export type LocationEntryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LocationEntries.
     */
    data: LocationEntryCreateManyInput | LocationEntryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LocationEntry createManyAndReturn
   */
  export type LocationEntryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationEntry
     */
    select?: LocationEntrySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LocationEntry
     */
    omit?: LocationEntryOmit<ExtArgs> | null
    /**
     * The data used to create many LocationEntries.
     */
    data: LocationEntryCreateManyInput | LocationEntryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationEntryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LocationEntry update
   */
  export type LocationEntryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationEntry
     */
    select?: LocationEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationEntry
     */
    omit?: LocationEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationEntryInclude<ExtArgs> | null
    /**
     * The data needed to update a LocationEntry.
     */
    data: XOR<LocationEntryUpdateInput, LocationEntryUncheckedUpdateInput>
    /**
     * Choose, which LocationEntry to update.
     */
    where: LocationEntryWhereUniqueInput
  }

  /**
   * LocationEntry updateMany
   */
  export type LocationEntryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LocationEntries.
     */
    data: XOR<LocationEntryUpdateManyMutationInput, LocationEntryUncheckedUpdateManyInput>
    /**
     * Filter which LocationEntries to update
     */
    where?: LocationEntryWhereInput
    /**
     * Limit how many LocationEntries to update.
     */
    limit?: number
  }

  /**
   * LocationEntry updateManyAndReturn
   */
  export type LocationEntryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationEntry
     */
    select?: LocationEntrySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LocationEntry
     */
    omit?: LocationEntryOmit<ExtArgs> | null
    /**
     * The data used to update LocationEntries.
     */
    data: XOR<LocationEntryUpdateManyMutationInput, LocationEntryUncheckedUpdateManyInput>
    /**
     * Filter which LocationEntries to update
     */
    where?: LocationEntryWhereInput
    /**
     * Limit how many LocationEntries to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationEntryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LocationEntry upsert
   */
  export type LocationEntryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationEntry
     */
    select?: LocationEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationEntry
     */
    omit?: LocationEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationEntryInclude<ExtArgs> | null
    /**
     * The filter to search for the LocationEntry to update in case it exists.
     */
    where: LocationEntryWhereUniqueInput
    /**
     * In case the LocationEntry found by the `where` argument doesn't exist, create a new LocationEntry with this data.
     */
    create: XOR<LocationEntryCreateInput, LocationEntryUncheckedCreateInput>
    /**
     * In case the LocationEntry was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LocationEntryUpdateInput, LocationEntryUncheckedUpdateInput>
  }

  /**
   * LocationEntry delete
   */
  export type LocationEntryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationEntry
     */
    select?: LocationEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationEntry
     */
    omit?: LocationEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationEntryInclude<ExtArgs> | null
    /**
     * Filter which LocationEntry to delete.
     */
    where: LocationEntryWhereUniqueInput
  }

  /**
   * LocationEntry deleteMany
   */
  export type LocationEntryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LocationEntries to delete
     */
    where?: LocationEntryWhereInput
    /**
     * Limit how many LocationEntries to delete.
     */
    limit?: number
  }

  /**
   * LocationEntry without action
   */
  export type LocationEntryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationEntry
     */
    select?: LocationEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationEntry
     */
    omit?: LocationEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationEntryInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    password: 'password',
    createdAt: 'createdAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const BatteryEntryScalarFieldEnum: {
    id: 'id',
    level: 'level',
    recordedAt: 'recordedAt',
    userId: 'userId'
  };

  export type BatteryEntryScalarFieldEnum = (typeof BatteryEntryScalarFieldEnum)[keyof typeof BatteryEntryScalarFieldEnum]


  export const LocationEntryScalarFieldEnum: {
    id: 'id',
    latitude: 'latitude',
    longitude: 'longitude',
    accuracy: 'accuracy',
    recordedAt: 'recordedAt',
    userId: 'userId'
  };

  export type LocationEntryScalarFieldEnum = (typeof LocationEntryScalarFieldEnum)[keyof typeof LocationEntryScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    batteries?: BatteryEntryListRelationFilter
    locations?: LocationEntryListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    batteries?: BatteryEntryOrderByRelationAggregateInput
    locations?: LocationEntryOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    batteries?: BatteryEntryListRelationFilter
    locations?: LocationEntryListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type BatteryEntryWhereInput = {
    AND?: BatteryEntryWhereInput | BatteryEntryWhereInput[]
    OR?: BatteryEntryWhereInput[]
    NOT?: BatteryEntryWhereInput | BatteryEntryWhereInput[]
    id?: StringFilter<"BatteryEntry"> | string
    level?: IntFilter<"BatteryEntry"> | number
    recordedAt?: DateTimeFilter<"BatteryEntry"> | Date | string
    userId?: StringFilter<"BatteryEntry"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type BatteryEntryOrderByWithRelationInput = {
    id?: SortOrder
    level?: SortOrder
    recordedAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type BatteryEntryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BatteryEntryWhereInput | BatteryEntryWhereInput[]
    OR?: BatteryEntryWhereInput[]
    NOT?: BatteryEntryWhereInput | BatteryEntryWhereInput[]
    level?: IntFilter<"BatteryEntry"> | number
    recordedAt?: DateTimeFilter<"BatteryEntry"> | Date | string
    userId?: StringFilter<"BatteryEntry"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type BatteryEntryOrderByWithAggregationInput = {
    id?: SortOrder
    level?: SortOrder
    recordedAt?: SortOrder
    userId?: SortOrder
    _count?: BatteryEntryCountOrderByAggregateInput
    _avg?: BatteryEntryAvgOrderByAggregateInput
    _max?: BatteryEntryMaxOrderByAggregateInput
    _min?: BatteryEntryMinOrderByAggregateInput
    _sum?: BatteryEntrySumOrderByAggregateInput
  }

  export type BatteryEntryScalarWhereWithAggregatesInput = {
    AND?: BatteryEntryScalarWhereWithAggregatesInput | BatteryEntryScalarWhereWithAggregatesInput[]
    OR?: BatteryEntryScalarWhereWithAggregatesInput[]
    NOT?: BatteryEntryScalarWhereWithAggregatesInput | BatteryEntryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BatteryEntry"> | string
    level?: IntWithAggregatesFilter<"BatteryEntry"> | number
    recordedAt?: DateTimeWithAggregatesFilter<"BatteryEntry"> | Date | string
    userId?: StringWithAggregatesFilter<"BatteryEntry"> | string
  }

  export type LocationEntryWhereInput = {
    AND?: LocationEntryWhereInput | LocationEntryWhereInput[]
    OR?: LocationEntryWhereInput[]
    NOT?: LocationEntryWhereInput | LocationEntryWhereInput[]
    id?: StringFilter<"LocationEntry"> | string
    latitude?: FloatFilter<"LocationEntry"> | number
    longitude?: FloatFilter<"LocationEntry"> | number
    accuracy?: FloatNullableFilter<"LocationEntry"> | number | null
    recordedAt?: DateTimeFilter<"LocationEntry"> | Date | string
    userId?: StringFilter<"LocationEntry"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type LocationEntryOrderByWithRelationInput = {
    id?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    accuracy?: SortOrderInput | SortOrder
    recordedAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type LocationEntryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LocationEntryWhereInput | LocationEntryWhereInput[]
    OR?: LocationEntryWhereInput[]
    NOT?: LocationEntryWhereInput | LocationEntryWhereInput[]
    latitude?: FloatFilter<"LocationEntry"> | number
    longitude?: FloatFilter<"LocationEntry"> | number
    accuracy?: FloatNullableFilter<"LocationEntry"> | number | null
    recordedAt?: DateTimeFilter<"LocationEntry"> | Date | string
    userId?: StringFilter<"LocationEntry"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type LocationEntryOrderByWithAggregationInput = {
    id?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    accuracy?: SortOrderInput | SortOrder
    recordedAt?: SortOrder
    userId?: SortOrder
    _count?: LocationEntryCountOrderByAggregateInput
    _avg?: LocationEntryAvgOrderByAggregateInput
    _max?: LocationEntryMaxOrderByAggregateInput
    _min?: LocationEntryMinOrderByAggregateInput
    _sum?: LocationEntrySumOrderByAggregateInput
  }

  export type LocationEntryScalarWhereWithAggregatesInput = {
    AND?: LocationEntryScalarWhereWithAggregatesInput | LocationEntryScalarWhereWithAggregatesInput[]
    OR?: LocationEntryScalarWhereWithAggregatesInput[]
    NOT?: LocationEntryScalarWhereWithAggregatesInput | LocationEntryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LocationEntry"> | string
    latitude?: FloatWithAggregatesFilter<"LocationEntry"> | number
    longitude?: FloatWithAggregatesFilter<"LocationEntry"> | number
    accuracy?: FloatNullableWithAggregatesFilter<"LocationEntry"> | number | null
    recordedAt?: DateTimeWithAggregatesFilter<"LocationEntry"> | Date | string
    userId?: StringWithAggregatesFilter<"LocationEntry"> | string
  }

  export type UserCreateInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    password: string
    createdAt?: Date | string
    batteries?: BatteryEntryCreateNestedManyWithoutUserInput
    locations?: LocationEntryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    password: string
    createdAt?: Date | string
    batteries?: BatteryEntryUncheckedCreateNestedManyWithoutUserInput
    locations?: LocationEntryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    batteries?: BatteryEntryUpdateManyWithoutUserNestedInput
    locations?: LocationEntryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    batteries?: BatteryEntryUncheckedUpdateManyWithoutUserNestedInput
    locations?: LocationEntryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    password: string
    createdAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BatteryEntryCreateInput = {
    id?: string
    level: number
    recordedAt?: Date | string
    user: UserCreateNestedOneWithoutBatteriesInput
  }

  export type BatteryEntryUncheckedCreateInput = {
    id?: string
    level: number
    recordedAt?: Date | string
    userId: string
  }

  export type BatteryEntryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBatteriesNestedInput
  }

  export type BatteryEntryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type BatteryEntryCreateManyInput = {
    id?: string
    level: number
    recordedAt?: Date | string
    userId: string
  }

  export type BatteryEntryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BatteryEntryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type LocationEntryCreateInput = {
    id?: string
    latitude: number
    longitude: number
    accuracy?: number | null
    recordedAt?: Date | string
    user: UserCreateNestedOneWithoutLocationsInput
  }

  export type LocationEntryUncheckedCreateInput = {
    id?: string
    latitude: number
    longitude: number
    accuracy?: number | null
    recordedAt?: Date | string
    userId: string
  }

  export type LocationEntryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    accuracy?: NullableFloatFieldUpdateOperationsInput | number | null
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutLocationsNestedInput
  }

  export type LocationEntryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    accuracy?: NullableFloatFieldUpdateOperationsInput | number | null
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type LocationEntryCreateManyInput = {
    id?: string
    latitude: number
    longitude: number
    accuracy?: number | null
    recordedAt?: Date | string
    userId: string
  }

  export type LocationEntryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    accuracy?: NullableFloatFieldUpdateOperationsInput | number | null
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationEntryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    accuracy?: NullableFloatFieldUpdateOperationsInput | number | null
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BatteryEntryListRelationFilter = {
    every?: BatteryEntryWhereInput
    some?: BatteryEntryWhereInput
    none?: BatteryEntryWhereInput
  }

  export type LocationEntryListRelationFilter = {
    every?: LocationEntryWhereInput
    some?: LocationEntryWhereInput
    none?: LocationEntryWhereInput
  }

  export type BatteryEntryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LocationEntryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type BatteryEntryCountOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
    recordedAt?: SortOrder
    userId?: SortOrder
  }

  export type BatteryEntryAvgOrderByAggregateInput = {
    level?: SortOrder
  }

  export type BatteryEntryMaxOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
    recordedAt?: SortOrder
    userId?: SortOrder
  }

  export type BatteryEntryMinOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
    recordedAt?: SortOrder
    userId?: SortOrder
  }

  export type BatteryEntrySumOrderByAggregateInput = {
    level?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type LocationEntryCountOrderByAggregateInput = {
    id?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    accuracy?: SortOrder
    recordedAt?: SortOrder
    userId?: SortOrder
  }

  export type LocationEntryAvgOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
    accuracy?: SortOrder
  }

  export type LocationEntryMaxOrderByAggregateInput = {
    id?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    accuracy?: SortOrder
    recordedAt?: SortOrder
    userId?: SortOrder
  }

  export type LocationEntryMinOrderByAggregateInput = {
    id?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    accuracy?: SortOrder
    recordedAt?: SortOrder
    userId?: SortOrder
  }

  export type LocationEntrySumOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
    accuracy?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type BatteryEntryCreateNestedManyWithoutUserInput = {
    create?: XOR<BatteryEntryCreateWithoutUserInput, BatteryEntryUncheckedCreateWithoutUserInput> | BatteryEntryCreateWithoutUserInput[] | BatteryEntryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BatteryEntryCreateOrConnectWithoutUserInput | BatteryEntryCreateOrConnectWithoutUserInput[]
    createMany?: BatteryEntryCreateManyUserInputEnvelope
    connect?: BatteryEntryWhereUniqueInput | BatteryEntryWhereUniqueInput[]
  }

  export type LocationEntryCreateNestedManyWithoutUserInput = {
    create?: XOR<LocationEntryCreateWithoutUserInput, LocationEntryUncheckedCreateWithoutUserInput> | LocationEntryCreateWithoutUserInput[] | LocationEntryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LocationEntryCreateOrConnectWithoutUserInput | LocationEntryCreateOrConnectWithoutUserInput[]
    createMany?: LocationEntryCreateManyUserInputEnvelope
    connect?: LocationEntryWhereUniqueInput | LocationEntryWhereUniqueInput[]
  }

  export type BatteryEntryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BatteryEntryCreateWithoutUserInput, BatteryEntryUncheckedCreateWithoutUserInput> | BatteryEntryCreateWithoutUserInput[] | BatteryEntryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BatteryEntryCreateOrConnectWithoutUserInput | BatteryEntryCreateOrConnectWithoutUserInput[]
    createMany?: BatteryEntryCreateManyUserInputEnvelope
    connect?: BatteryEntryWhereUniqueInput | BatteryEntryWhereUniqueInput[]
  }

  export type LocationEntryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<LocationEntryCreateWithoutUserInput, LocationEntryUncheckedCreateWithoutUserInput> | LocationEntryCreateWithoutUserInput[] | LocationEntryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LocationEntryCreateOrConnectWithoutUserInput | LocationEntryCreateOrConnectWithoutUserInput[]
    createMany?: LocationEntryCreateManyUserInputEnvelope
    connect?: LocationEntryWhereUniqueInput | LocationEntryWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BatteryEntryUpdateManyWithoutUserNestedInput = {
    create?: XOR<BatteryEntryCreateWithoutUserInput, BatteryEntryUncheckedCreateWithoutUserInput> | BatteryEntryCreateWithoutUserInput[] | BatteryEntryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BatteryEntryCreateOrConnectWithoutUserInput | BatteryEntryCreateOrConnectWithoutUserInput[]
    upsert?: BatteryEntryUpsertWithWhereUniqueWithoutUserInput | BatteryEntryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BatteryEntryCreateManyUserInputEnvelope
    set?: BatteryEntryWhereUniqueInput | BatteryEntryWhereUniqueInput[]
    disconnect?: BatteryEntryWhereUniqueInput | BatteryEntryWhereUniqueInput[]
    delete?: BatteryEntryWhereUniqueInput | BatteryEntryWhereUniqueInput[]
    connect?: BatteryEntryWhereUniqueInput | BatteryEntryWhereUniqueInput[]
    update?: BatteryEntryUpdateWithWhereUniqueWithoutUserInput | BatteryEntryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BatteryEntryUpdateManyWithWhereWithoutUserInput | BatteryEntryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BatteryEntryScalarWhereInput | BatteryEntryScalarWhereInput[]
  }

  export type LocationEntryUpdateManyWithoutUserNestedInput = {
    create?: XOR<LocationEntryCreateWithoutUserInput, LocationEntryUncheckedCreateWithoutUserInput> | LocationEntryCreateWithoutUserInput[] | LocationEntryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LocationEntryCreateOrConnectWithoutUserInput | LocationEntryCreateOrConnectWithoutUserInput[]
    upsert?: LocationEntryUpsertWithWhereUniqueWithoutUserInput | LocationEntryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LocationEntryCreateManyUserInputEnvelope
    set?: LocationEntryWhereUniqueInput | LocationEntryWhereUniqueInput[]
    disconnect?: LocationEntryWhereUniqueInput | LocationEntryWhereUniqueInput[]
    delete?: LocationEntryWhereUniqueInput | LocationEntryWhereUniqueInput[]
    connect?: LocationEntryWhereUniqueInput | LocationEntryWhereUniqueInput[]
    update?: LocationEntryUpdateWithWhereUniqueWithoutUserInput | LocationEntryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LocationEntryUpdateManyWithWhereWithoutUserInput | LocationEntryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LocationEntryScalarWhereInput | LocationEntryScalarWhereInput[]
  }

  export type BatteryEntryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BatteryEntryCreateWithoutUserInput, BatteryEntryUncheckedCreateWithoutUserInput> | BatteryEntryCreateWithoutUserInput[] | BatteryEntryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BatteryEntryCreateOrConnectWithoutUserInput | BatteryEntryCreateOrConnectWithoutUserInput[]
    upsert?: BatteryEntryUpsertWithWhereUniqueWithoutUserInput | BatteryEntryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BatteryEntryCreateManyUserInputEnvelope
    set?: BatteryEntryWhereUniqueInput | BatteryEntryWhereUniqueInput[]
    disconnect?: BatteryEntryWhereUniqueInput | BatteryEntryWhereUniqueInput[]
    delete?: BatteryEntryWhereUniqueInput | BatteryEntryWhereUniqueInput[]
    connect?: BatteryEntryWhereUniqueInput | BatteryEntryWhereUniqueInput[]
    update?: BatteryEntryUpdateWithWhereUniqueWithoutUserInput | BatteryEntryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BatteryEntryUpdateManyWithWhereWithoutUserInput | BatteryEntryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BatteryEntryScalarWhereInput | BatteryEntryScalarWhereInput[]
  }

  export type LocationEntryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<LocationEntryCreateWithoutUserInput, LocationEntryUncheckedCreateWithoutUserInput> | LocationEntryCreateWithoutUserInput[] | LocationEntryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LocationEntryCreateOrConnectWithoutUserInput | LocationEntryCreateOrConnectWithoutUserInput[]
    upsert?: LocationEntryUpsertWithWhereUniqueWithoutUserInput | LocationEntryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LocationEntryCreateManyUserInputEnvelope
    set?: LocationEntryWhereUniqueInput | LocationEntryWhereUniqueInput[]
    disconnect?: LocationEntryWhereUniqueInput | LocationEntryWhereUniqueInput[]
    delete?: LocationEntryWhereUniqueInput | LocationEntryWhereUniqueInput[]
    connect?: LocationEntryWhereUniqueInput | LocationEntryWhereUniqueInput[]
    update?: LocationEntryUpdateWithWhereUniqueWithoutUserInput | LocationEntryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LocationEntryUpdateManyWithWhereWithoutUserInput | LocationEntryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LocationEntryScalarWhereInput | LocationEntryScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutBatteriesInput = {
    create?: XOR<UserCreateWithoutBatteriesInput, UserUncheckedCreateWithoutBatteriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutBatteriesInput
    connect?: UserWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutBatteriesNestedInput = {
    create?: XOR<UserCreateWithoutBatteriesInput, UserUncheckedCreateWithoutBatteriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutBatteriesInput
    upsert?: UserUpsertWithoutBatteriesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBatteriesInput, UserUpdateWithoutBatteriesInput>, UserUncheckedUpdateWithoutBatteriesInput>
  }

  export type UserCreateNestedOneWithoutLocationsInput = {
    create?: XOR<UserCreateWithoutLocationsInput, UserUncheckedCreateWithoutLocationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutLocationsInput
    connect?: UserWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutLocationsNestedInput = {
    create?: XOR<UserCreateWithoutLocationsInput, UserUncheckedCreateWithoutLocationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutLocationsInput
    upsert?: UserUpsertWithoutLocationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLocationsInput, UserUpdateWithoutLocationsInput>, UserUncheckedUpdateWithoutLocationsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type BatteryEntryCreateWithoutUserInput = {
    id?: string
    level: number
    recordedAt?: Date | string
  }

  export type BatteryEntryUncheckedCreateWithoutUserInput = {
    id?: string
    level: number
    recordedAt?: Date | string
  }

  export type BatteryEntryCreateOrConnectWithoutUserInput = {
    where: BatteryEntryWhereUniqueInput
    create: XOR<BatteryEntryCreateWithoutUserInput, BatteryEntryUncheckedCreateWithoutUserInput>
  }

  export type BatteryEntryCreateManyUserInputEnvelope = {
    data: BatteryEntryCreateManyUserInput | BatteryEntryCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type LocationEntryCreateWithoutUserInput = {
    id?: string
    latitude: number
    longitude: number
    accuracy?: number | null
    recordedAt?: Date | string
  }

  export type LocationEntryUncheckedCreateWithoutUserInput = {
    id?: string
    latitude: number
    longitude: number
    accuracy?: number | null
    recordedAt?: Date | string
  }

  export type LocationEntryCreateOrConnectWithoutUserInput = {
    where: LocationEntryWhereUniqueInput
    create: XOR<LocationEntryCreateWithoutUserInput, LocationEntryUncheckedCreateWithoutUserInput>
  }

  export type LocationEntryCreateManyUserInputEnvelope = {
    data: LocationEntryCreateManyUserInput | LocationEntryCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BatteryEntryUpsertWithWhereUniqueWithoutUserInput = {
    where: BatteryEntryWhereUniqueInput
    update: XOR<BatteryEntryUpdateWithoutUserInput, BatteryEntryUncheckedUpdateWithoutUserInput>
    create: XOR<BatteryEntryCreateWithoutUserInput, BatteryEntryUncheckedCreateWithoutUserInput>
  }

  export type BatteryEntryUpdateWithWhereUniqueWithoutUserInput = {
    where: BatteryEntryWhereUniqueInput
    data: XOR<BatteryEntryUpdateWithoutUserInput, BatteryEntryUncheckedUpdateWithoutUserInput>
  }

  export type BatteryEntryUpdateManyWithWhereWithoutUserInput = {
    where: BatteryEntryScalarWhereInput
    data: XOR<BatteryEntryUpdateManyMutationInput, BatteryEntryUncheckedUpdateManyWithoutUserInput>
  }

  export type BatteryEntryScalarWhereInput = {
    AND?: BatteryEntryScalarWhereInput | BatteryEntryScalarWhereInput[]
    OR?: BatteryEntryScalarWhereInput[]
    NOT?: BatteryEntryScalarWhereInput | BatteryEntryScalarWhereInput[]
    id?: StringFilter<"BatteryEntry"> | string
    level?: IntFilter<"BatteryEntry"> | number
    recordedAt?: DateTimeFilter<"BatteryEntry"> | Date | string
    userId?: StringFilter<"BatteryEntry"> | string
  }

  export type LocationEntryUpsertWithWhereUniqueWithoutUserInput = {
    where: LocationEntryWhereUniqueInput
    update: XOR<LocationEntryUpdateWithoutUserInput, LocationEntryUncheckedUpdateWithoutUserInput>
    create: XOR<LocationEntryCreateWithoutUserInput, LocationEntryUncheckedCreateWithoutUserInput>
  }

  export type LocationEntryUpdateWithWhereUniqueWithoutUserInput = {
    where: LocationEntryWhereUniqueInput
    data: XOR<LocationEntryUpdateWithoutUserInput, LocationEntryUncheckedUpdateWithoutUserInput>
  }

  export type LocationEntryUpdateManyWithWhereWithoutUserInput = {
    where: LocationEntryScalarWhereInput
    data: XOR<LocationEntryUpdateManyMutationInput, LocationEntryUncheckedUpdateManyWithoutUserInput>
  }

  export type LocationEntryScalarWhereInput = {
    AND?: LocationEntryScalarWhereInput | LocationEntryScalarWhereInput[]
    OR?: LocationEntryScalarWhereInput[]
    NOT?: LocationEntryScalarWhereInput | LocationEntryScalarWhereInput[]
    id?: StringFilter<"LocationEntry"> | string
    latitude?: FloatFilter<"LocationEntry"> | number
    longitude?: FloatFilter<"LocationEntry"> | number
    accuracy?: FloatNullableFilter<"LocationEntry"> | number | null
    recordedAt?: DateTimeFilter<"LocationEntry"> | Date | string
    userId?: StringFilter<"LocationEntry"> | string
  }

  export type UserCreateWithoutBatteriesInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    password: string
    createdAt?: Date | string
    locations?: LocationEntryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBatteriesInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    password: string
    createdAt?: Date | string
    locations?: LocationEntryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBatteriesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBatteriesInput, UserUncheckedCreateWithoutBatteriesInput>
  }

  export type UserUpsertWithoutBatteriesInput = {
    update: XOR<UserUpdateWithoutBatteriesInput, UserUncheckedUpdateWithoutBatteriesInput>
    create: XOR<UserCreateWithoutBatteriesInput, UserUncheckedCreateWithoutBatteriesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBatteriesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBatteriesInput, UserUncheckedUpdateWithoutBatteriesInput>
  }

  export type UserUpdateWithoutBatteriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locations?: LocationEntryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBatteriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locations?: LocationEntryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutLocationsInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    password: string
    createdAt?: Date | string
    batteries?: BatteryEntryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLocationsInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    password: string
    createdAt?: Date | string
    batteries?: BatteryEntryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLocationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLocationsInput, UserUncheckedCreateWithoutLocationsInput>
  }

  export type UserUpsertWithoutLocationsInput = {
    update: XOR<UserUpdateWithoutLocationsInput, UserUncheckedUpdateWithoutLocationsInput>
    create: XOR<UserCreateWithoutLocationsInput, UserUncheckedCreateWithoutLocationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLocationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLocationsInput, UserUncheckedUpdateWithoutLocationsInput>
  }

  export type UserUpdateWithoutLocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    batteries?: BatteryEntryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    batteries?: BatteryEntryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BatteryEntryCreateManyUserInput = {
    id?: string
    level: number
    recordedAt?: Date | string
  }

  export type LocationEntryCreateManyUserInput = {
    id?: string
    latitude: number
    longitude: number
    accuracy?: number | null
    recordedAt?: Date | string
  }

  export type BatteryEntryUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BatteryEntryUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BatteryEntryUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationEntryUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    accuracy?: NullableFloatFieldUpdateOperationsInput | number | null
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationEntryUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    accuracy?: NullableFloatFieldUpdateOperationsInput | number | null
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationEntryUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    accuracy?: NullableFloatFieldUpdateOperationsInput | number | null
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}